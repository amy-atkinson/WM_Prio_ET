# left eye is better - take that for now
d <-
d %>%
mutate(time = round((device_time_stamp - device_time_stamp[1])/1000)) %>% # set first timestamp to 0 and all others corrected afterwards
select(time,
x = left_x,
y = left_y,
validity = left_validity,
trial,
trial_phase)  %>%
mutate(x = case_when(validity == 1 ~ x,
validity == 0 ~ NA_real_),
y = case_when(validity == 1 ~ y,
validity == 0 ~ NA_real_)) %>%
select(-validity)
saveRDS(d, "data_pilot.RDS")
library(tidyverse)
library(eyetools)
d <- readRDS("data_pilot.RDS")
d <-
d %>%
mutate(x = x*1920, y = y*1080)
d5 <-
d %>%
filter(trial_phase == 7) %>%
select(-trial_phase)
d7 <-
d %>%
filter(trial_phase == 7) %>%
select(-trial_phase)
fix5 <-
eyetools::fix_dispersion(d5)
spatial_plot(raw_data = d5, fix_data = fix5, res = c(0,1920,0,1080), show_fix_order = FALSE)
spatial_plot(raw_data = d5, fix_data = fix5, res = c(760,1160,0,1080), show_fix_order = FALSE)
spatial_plot(raw_data = d5, fix_data = fix5, res = c(760,1160,340,740), show_fix_order = FALSE)
d7 <-
d %>%
filter(trial_phase == 7) %>%
select(-trial_phase) %>%
filter(trial == 10)
fix5 <-
eyetools::fix_dispersion(d5)
spatial_plot(raw_data = d5, fix_data = fix5, res = c(760,1160,340,740), show_fix_order = FALSE)
d7 <-
d %>%
filter(trial_phase == 7) %>%
select(-trial_phase) %>%
filter(trial == 10)
fix7 <-
eyetools::fix_dispersion(d7)
spatial_plot(raw_data = d7, fix_data = fix7, res = c(760,1160,340,740), show_fix_order = FALSE)
d7 <-
d %>%
filter(trial_phase == 7) %>%
select(-trial_phase)
fix7 <-
eyetools::fix_dispersion(d7)
spatial_plot(raw_data = d7, fix_data = fix7, res = c(760,1160,340,740), show_fix_order = FALSE)
d7 <-
d %>%
filter(trial_phase == 5) %>%
select(-trial_phase)
fix7 <-
eyetools::fix_dispersion(d7)
spatial_plot(raw_data = d7, fix_data = fix7, res = c(760,1160,340,740), show_fix_order = FALSE)
d7 <-
d %>%
filter(trial_phase == 9) %>%
select(-trial_phase)
fix7 <-
eyetools::fix_dispersion(d7)
spatial_plot(raw_data = d7, fix_data = fix7, res = c(760,1160,340,740), show_fix_order = FALSE)
spatial_plot(raw_data = d7,
fix_data = fix7,
res = c(560,1360,240,840),
show_fix_order = FALSE)
spatial_plot(raw_data = d7,
fix_data = fix7,
res = c(0,1920,0,1080),
show_fix_order = FALSE)
spatial_plot(raw_data = d7,
fix_data = fix7,
res = c(300,1620,100,980),
show_fix_order = FALSE)
d7 <-
d %>%
filter(trial_phase == 3) %>%
select(-trial_phase)
fix7 <-
eyetools::fix_dispersion(d7)
spatial_plot(raw_data = d7,
fix_data = fix7,
res = c(300,1620,100,980),
show_fix_order = FALSE)
d7 <-
d %>%
filter(trial_phase == 7) %>%
select(-trial_phase)
fix7 <-
eyetools::fix_dispersion(d7)
spatial_plot(raw_data = d7,
fix_data = fix7,
res = c(300,1620,100,980),
show_fix_order = FALSE)
d7 <-
d %>%
filter(trial_phase == 7) %>%
select(-trial_phase) %>%
filter(trial == 1)
fix7 <-
eyetools::fix_dispersion(d7)
spatial_plot(raw_data = d7,
fix_data = fix7,
res = c(300,1620,100,980),
show_fix_order = FALSE)
d7 <-
d %>%
filter(trial_phase == 7) %>%
select(-trial_phase) %>%
filter(trial == 2)
fix7 <-
eyetools::fix_dispersion(d7)
spatial_plot(raw_data = d7,
fix_data = fix7,
res = c(300,1620,100,980),
show_fix_order = FALSE)
fix7
d %>%
filter(trial_phase == 7)
d %>%
filter(trial_phase == 7) %>%
select(-trial_phase) %>%
filter(trial == 2)
231*8.33
241*8.33
fix7 <-
eyetools::fix_dispersion(d7)
fix7 <-
eyetools::fix_dispersion(d7)
fix7
d7 <-
d %>%
filter(trial_phase == 7) %>%
select(-trial_phase) %>%
filter(trial == 3)
#fix7 <-
eyetools::fix_dispersion(d7)
d7 <-
d %>%
filter(trial_phase == 7) %>%
select(-trial_phase)
#fix7 <-
eyetools::fix_dispersion(d7)
d7 <-
d %>%
filter(trial_phase == 7) %>%
select(-trial_phase) %>%
filter(trial == 18)
#fix7 <-
eyetools::fix_dispersion(d7)
fix7 <-
eyetools::fix_dispersion(d7)
spatial_plot(raw_data = d7,
fix_data = fix7,
res = c(300,1620,100,980),
show_fix_order = FALSE)
d7 <-
d %>%
filter(trial_phase == 7) %>%
select(-trial_phase) %>%
filter(trial == 18)
fix7 <-
eyetools::fix_dispersion(d7)
spatial_plot(raw_data = d7,
fix_data = fix7,
res = c(300,1620,100,980),
show_fix_order = FALSE)
spatial_plot(raw_data = d7,
fix_data = fix7,
res = c(0,1920,0,1080),
show_fix_order = FALSE)
d <- readRDS("data_pilot.RDS")
View(d)
library(tidyverse)
library(eyetools)
# pilot data of 20 trials
d_raw <- read_csv("Raw_data/ET_csv_999.csv")
# select the columns we need from the eye data, rename them
d <-
d_raw %>%
select(device_time_stamp,
system_time_stamp,
left_gaze = left_gaze_point_on_display_area,
left_validity = left_gaze_point_validity,
right_gaze = right_gaze_point_on_display_area,
right_validity = right_gaze_point_validity,
trial,
trial_phase,
pp_TS)
# pilot data of 20 trials
d_raw <- read_csv("Raw_data/Eye_raw_data/ET_csv_999.csv")
# pilot data of 20 trials
d_raw <- read_csv("Eye_raw_data/ET_csv_999.csv")
# select the columns we need from the eye data, rename them
d <-
d_raw %>%
select(device_time_stamp,
system_time_stamp,
left_gaze = left_gaze_point_on_display_area,
left_validity = left_gaze_point_validity,
right_gaze = right_gaze_point_on_display_area,
right_validity = right_gaze_point_validity,
trial,
trial_phase,
pp_TS)
# process the left and right eye data columns into separate x and y variables
d <-
d %>%
mutate(left_gaze = gsub("[()]", "", left_gaze), # remove parentheses from numbers
right_gaze = gsub("[()]", "", right_gaze)) %>%
separate(left_gaze, into = c("left_x", "left_y"), sep = ",") %>%
separate(right_gaze, into = c("right_x", "right_y"), sep = ",") %>%
mutate(across(where(is.character),as.numeric))
# left eye is better - take that for now
d <-
d %>%
mutate(time = round((device_time_stamp - device_time_stamp[1])/1000)) %>% # set first timestamp to 0 and all others corrected afterwards
select(time,
x = left_x,
y = left_y,
validity = left_validity,
trial,
trial_phase)  %>%
mutate(x = case_when(validity == 1 ~ x,
validity == 0 ~ NA_real_), # change NaN to NA values
y = case_when(validity == 1 ~ y,
validity == 0 ~ NA_real_)) %>%
select(-validity) # no longer need validity
saveRDS(d, "data_pilot.RDS")
# select the columns we need from the eye data, rename them
d <-
d_raw %>%
select(device_time_stamp,
system_time_stamp,
left_gaze = left_gaze_point_on_display_area,
left_validity = left_gaze_point_validity,
right_gaze = right_gaze_point_on_display_area,
right_validity = right_gaze_point_validity,
trial,
trial_phase,
pp_TS)
# process the left and right eye data columns into separate x and y variables
d <-
d %>%
mutate(left_gaze = gsub("[()]", "", left_gaze), # remove parentheses from numbers
right_gaze = gsub("[()]", "", right_gaze)) %>%
separate(left_gaze, into = c("left_x", "left_y"), sep = ",") %>%
separate(right_gaze, into = c("right_x", "right_y"), sep = ",") %>%
mutate(across(where(is.character),as.numeric))
library(tidyverse)
library(eyetools)
# pilot data of 20 trials
d_raw <- read_csv("Eye_raw_data/ET_csv_999.csv")
# select the columns we need from the eye data, rename them
d <-
d_raw %>%
select(device_time_stamp,
system_time_stamp,
left_gaze = left_gaze_point_on_display_area,
left_validity = left_gaze_point_validity,
right_gaze = right_gaze_point_on_display_area,
right_validity = right_gaze_point_validity,
trial,
trial_phase,
pp_TS)
# process the left and right eye data columns into separate x and y variables
d <-
d %>%
mutate(left_gaze = gsub("[()]", "", left_gaze), # remove parentheses from numbers
right_gaze = gsub("[()]", "", right_gaze)) %>%
separate(left_gaze, into = c("left_x", "left_y"), sep = ",") %>%
separate(right_gaze, into = c("right_x", "right_y"), sep = ",") %>%
mutate(across(where(is.character),as.numeric))
View(d)
# get both eyes
d <-
d %>%
mutate(time = round((device_time_stamp - device_time_stamp[1])/1000)) %>% # set first timestamp to 0 and all others corrected afterwards
select(-device_time_stamp, -system_time_stamp)  %>%
mutate(x = case_when(validity == 1 ~ x,
validity == 0 ~ NA_real_), # change NaN to NA values
y = case_when(validity == 1 ~ y,
validity == 0 ~ NA_real_)) %>%
select(-validity) # no longer need validity
d %>%
mutate(time = round((device_time_stamp - device_time_stamp[1])/1000)) %>% # set first timestamp to 0 and all others corrected afterwards
select(-device_time_stamp, -system_time_stamp)
# get both eyes
d <-
d %>%
mutate(time = round((device_time_stamp - device_time_stamp[1])/1000)) %>% # set first timestamp to 0 and all others corrected afterwards
select(-device_time_stamp, -system_time_stamp)  %>%
mutate(left_x = case_when(left_validity == 1 ~ x,
validity == 0 ~ NA_real_), # change NaN to NA values
left_y = case_when(left_validity == 1 ~ y,
validity == 0 ~ NA_real_),
right_x = case_when(right_validity == 1 ~ x,
validity == 0 ~ NA_real_), # change NaN to NA values
right_y = case_when(right_validity == 1 ~ y,
validity == 0 ~ NA_real_)) %>%
select(-validity) # no longer need validity
# get both eyes
d <-
d %>%
mutate(time = round((device_time_stamp - device_time_stamp[1])/1000)) %>% # set first timestamp to 0 and all others corrected afterwards
select(-device_time_stamp, -system_time_stamp)  %>%
mutate(left_x = case_when(left_validity == 1 ~ x,
left_validity == 0 ~ NA_real_), # change NaN to NA values
left_y = case_when(left_validity == 1 ~ y,
left_validity == 0 ~ NA_real_),
right_x = case_when(right_validity == 1 ~ x,
right_validity == 0 ~ NA_real_), # change NaN to NA values
right_y = case_when(right_validity == 1 ~ y,
right_validity == 0 ~ NA_real_)) %>%
select(-validity) # no longer need validity
# get both eyes
d <-
d %>%
mutate(time = round((device_time_stamp - device_time_stamp[1])/1000)) %>% # set first timestamp to 0 and all others corrected afterwards
select(-device_time_stamp, -system_time_stamp)  %>%
mutate(left_x = case_when(left_validity == 1 ~ left_x,
left_validity == 0 ~ NA_real_), # change NaN to NA values
left_y = case_when(left_validity == 1 ~ left_y,
left_validity == 0 ~ NA_real_),
right_x = case_when(right_validity == 1 ~ right_x,
right_validity == 0 ~ NA_real_), # change NaN to NA values
right_y = case_when(right_validity == 1 ~ right_y,
right_validity == 0 ~ NA_real_)) %>%
select(-validity) # no longer need validity
# get both eyes
d <-
d %>%
mutate(time = round((device_time_stamp - device_time_stamp[1])/1000)) %>% # set first timestamp to 0 and all others corrected afterwards
select(-device_time_stamp, -system_time_stamp)  %>%
mutate(left_x = case_when(left_validity == 1 ~ left_x,
left_validity == 0 ~ NA_real_), # change NaN to NA values
left_y = case_when(left_validity == 1 ~ left_y,
left_validity == 0 ~ NA_real_),
right_x = case_when(right_validity == 1 ~ right_x,
right_validity == 0 ~ NA_real_), # change NaN to NA values
right_y = case_when(right_validity == 1 ~ right_y,
right_validity == 0 ~ NA_real_))
View(d)
# get both eyes
d <-
d %>%
mutate(time = round((device_time_stamp - device_time_stamp[1])/1000)) %>% # set first timestamp to 0 and all others corrected afterwards
select(-device_time_stamp, -system_time_stamp)  %>%
mutate(left_x = case_when(left_validity == 1 ~ left_x,
left_validity == 0 ~ NA_real_), # change NaN to NA values
left_y = case_when(left_validity == 1 ~ left_y,
left_validity == 0 ~ NA_real_),
right_x = case_when(right_validity == 1 ~ right_x,
right_validity == 0 ~ NA_real_), # change NaN to NA values
right_y = case_when(right_validity == 1 ~ right_y,
right_validity == 0 ~ NA_real_)) %>%
select(time, everything())
# select the columns we need from the eye data, rename them
d <-
d_raw %>%
select(device_time_stamp,
system_time_stamp,
left_gaze = left_gaze_point_on_display_area,
left_validity = left_gaze_point_validity,
right_gaze = right_gaze_point_on_display_area,
right_validity = right_gaze_point_validity,
trial,
trial_phase,
pp_TS)
# process the left and right eye data columns into separate x and y variables
d <-
d %>%
mutate(left_gaze = gsub("[()]", "", left_gaze), # remove parentheses from numbers
right_gaze = gsub("[()]", "", right_gaze)) %>%
separate(left_gaze, into = c("left_x", "left_y"), sep = ",") %>%
separate(right_gaze, into = c("right_x", "right_y"), sep = ",") %>%
mutate(across(where(is.character),as.numeric))
# get both eyes
d_new <-
d %>%
mutate(time = round((device_time_stamp - device_time_stamp[1])/1000)) %>% # set first timestamp to 0 and all others corrected afterwards
select(-device_time_stamp, -system_time_stamp)  %>%
mutate(left_x = case_when(left_validity == 1 ~ left_x,
left_validity == 0 ~ NA_real_), # change NaN to NA values
left_y = case_when(left_validity == 1 ~ left_y,
left_validity == 0 ~ NA_real_),
right_x = case_when(right_validity == 1 ~ right_x,
right_validity == 0 ~ NA_real_), # change NaN to NA values
right_y = case_when(right_validity == 1 ~ right_y,
right_validity == 0 ~ NA_real_)) %>%
select(time, everything())
View(d_new)
# get both eyes
d_new <-
d %>%
mutate(time = round((device_time_stamp - device_time_stamp[1])/1000)) %>% # set first timestamp to 0 and all others corrected afterwards
select(-device_time_stamp, -system_time_stamp)  %>%
mutate(left_x = case_when(left_validity == 1 ~ left_x,
left_validity == 0 ~ NA_real_), # change NaN to NA values
left_y = case_when(left_validity == 1 ~ left_y,
left_validity == 0 ~ NA_real_),
right_x = case_when(right_validity == 1 ~ right_x,
right_validity == 0 ~ NA_real_), # change NaN to NA values
right_y = case_when(right_validity == 1 ~ right_y,
right_validity == 0 ~ NA_real_)) %>%
select(time, -ppTS, everything())
# get both eyes
d_new <-
d %>%
mutate(time = round((device_time_stamp - device_time_stamp[1])/1000)) %>% # set first timestamp to 0 and all others corrected afterwards
select(-device_time_stamp, -system_time_stamp)  %>%
mutate(left_x = case_when(left_validity == 1 ~ left_x,
left_validity == 0 ~ NA_real_), # change NaN to NA values
left_y = case_when(left_validity == 1 ~ left_y,
left_validity == 0 ~ NA_real_),
right_x = case_when(right_validity == 1 ~ right_x,
right_validity == 0 ~ NA_real_), # change NaN to NA values
right_y = case_when(right_validity == 1 ~ right_y,
right_validity == 0 ~ NA_real_)) %>%
select(time, -pp_TS, everything())
# get both eyes
d_new <-
d %>%
mutate(time = round((device_time_stamp - device_time_stamp[1])/1000)) %>% # set first timestamp to 0 and all others corrected afterwards
select(-device_time_stamp, -system_time_stamp)  %>%
mutate(left_x = case_when(left_validity == 1 ~ left_x,
left_validity == 0 ~ NA_real_), # change NaN to NA values
left_y = case_when(left_validity == 1 ~ left_y,
left_validity == 0 ~ NA_real_),
right_x = case_when(right_validity == 1 ~ right_x,
right_validity == 0 ~ NA_real_), # change NaN to NA values
right_y = case_when(right_validity == 1 ~ right_y,
right_validity == 0 ~ NA_real_)) %>%
select(time, everything(), -pp_TS)
saveRDS(d, "data_pilot.RDS")
# get both eyes
d <-
d %>%
mutate(time = round((device_time_stamp - device_time_stamp[1])/1000)) %>% # set first timestamp to 0 and all others corrected afterwards
select(-device_time_stamp, -system_time_stamp)  %>%
mutate(left_x = case_when(left_validity == 1 ~ left_x,
left_validity == 0 ~ NA_real_), # change NaN to NA values
left_y = case_when(left_validity == 1 ~ left_y,
left_validity == 0 ~ NA_real_),
right_x = case_when(right_validity == 1 ~ right_x,
right_validity == 0 ~ NA_real_), # change NaN to NA values
right_y = case_when(right_validity == 1 ~ right_y,
right_validity == 0 ~ NA_real_)) %>%
select(time, everything(), -pp_TS)
saveRDS(d, "data_pilot.RDS")
# select the columns we need from the eye data, rename them
d <-
d_raw %>%
select(device_time_stamp,
system_time_stamp,
left_gaze = left_gaze_point_on_display_area,
left_validity = left_gaze_point_validity,
right_gaze = right_gaze_point_on_display_area,
right_validity = right_gaze_point_validity,
trial,
trial_phase,
pp_TS)
library(tidyverse)
library(eyetools)
# pilot data of 20 trials
d_raw <- read_csv("Eye_raw_data/ET_csv_999.csv")
# select the columns we need from the eye data, rename them
d <-
d_raw %>%
select(device_time_stamp,
system_time_stamp,
left_gaze = left_gaze_point_on_display_area,
left_validity = left_gaze_point_validity,
right_gaze = right_gaze_point_on_display_area,
right_validity = right_gaze_point_validity,
trial,
trial_phase,
pp_TS)
# process the left and right eye data columns into separate x and y variables
d <-
d %>%
mutate(left_gaze = gsub("[()]", "", left_gaze), # remove parentheses from numbers
right_gaze = gsub("[()]", "", right_gaze)) %>%
separate(left_gaze, into = c("left_x", "left_y"), sep = ",") %>%
separate(right_gaze, into = c("right_x", "right_y"), sep = ",") %>%
mutate(across(where(is.character),as.numeric))
# get both eyes
d <-
d %>%
mutate(time = round((device_time_stamp - device_time_stamp[1])/1000)) %>% # set first timestamp to 0 and all others corrected afterwards
select(-device_time_stamp, -system_time_stamp)  %>%
mutate(left_x = case_when(left_validity == 1 ~ left_x,
left_validity == 0 ~ NA_real_), # change NaN to NA values
left_y = case_when(left_validity == 1 ~ left_y,
left_validity == 0 ~ NA_real_),
right_x = case_when(right_validity == 1 ~ right_x,
right_validity == 0 ~ NA_real_), # change NaN to NA values
right_y = case_when(right_validity == 1 ~ right_y,
right_validity == 0 ~ NA_real_)) %>%
select(time, left_x, left_y, right_x, right_y, trial, trial_phase)
saveRDS(d, "data_pilot.RDS")
View(d)
